{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\FAJAR.PK\\\\fcc\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { subtract } from './types';\nimport { ON_OPERATOR_CLICK, multiply, asterisk, operators, ON_NUM_CLICK, ON_EQUAL_CLICK, ON_CLEAR_CLICK, ON_ZERO_CLICK, ON_DECIMAL_CLICK, decimal } from './types';\nexport var initialState = {\n  formula: '',\n  display: '0',\n  evaluated: false\n};\nvar isOperator = /[x/+‑]/,\n    endsWithOperator = /[x+‑/]$/,\n    endsWithNegativeSign = /[x/+]‑$/,\n    clearStyle = {\n  background: '#ac3939'\n},\n    operatorStyle = {\n  background: '#666666'\n},\n    equalsStyle = {\n  background: '#004466',\n  position: 'absolute',\n  height: 130,\n  bottom: 5\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ON_NUM_CLICK:\n      {\n        var formula = state.formula,\n            evaluated = state.evaluated,\n            display = state.display,\n            keyVal = action.payload.keyVal,\n            displayVal = \"\".concat(display).concat(keyVal);\n\n        if (!evaluated) {\n          return _objectSpread({}, state, {\n            formula: \"\".concat(formula).concat(keyVal === multiply ? asterisk : keyVal),\n            display: displayVal.charAt(0) === '0' ? displayVal.substr(1) : displayVal\n          });\n        }\n\n        if (evaluated) {\n          return {\n            formula: keyVal,\n            display: keyVal,\n            evaluated: false\n          };\n        }\n      }\n\n    case ON_OPERATOR_CLICK:\n      {\n        var _formula = state.formula,\n            _display = state.display,\n            _evaluated = state.evaluated,\n            _keyVal = action.payload.keyVal,\n            endString = _display.charAt(_display.length - 1),\n            formulaKeyVal = _keyVal === multiply ? asterisk : _keyVal;\n\n        var formulaVal = \"\".concat(_formula).concat(formulaKeyVal);\n\n        if (!_evaluated) {\n          if (!_formula.length) {\n            return state;\n          }\n\n          if (endString === _keyVal) {\n            return state;\n          } // temp.match(/[+\\-*/]/g)\n\n\n          if (endString === multiply && _keyVal === subtract) {\n            console.log('formulaVal ', formulaVal);\n            return _objectSpread({}, state, {\n              formula: formulaVal,\n              display: _keyVal\n            });\n          }\n\n          if (Object.values(operators).includes(endString) && endString !== _keyVal) {\n            formulaVal = formulaVal.slice(0, -2) + formulaKeyVal;\n          }\n\n          var operatorReg = /(\\+|-|\\*|\\/){2,}/; //checks for consecutive operators in the string\n\n          var tempOps = formulaVal.match(operatorReg); //this contains the group or groups of consecutive operators\n\n          if (tempOps != null) {\n            var opBlock = tempOps[0].toString(); //converts the block into string\n\n            formulaVal = formulaVal.replace(opBlock, tempOps[tempOps.length - 1]); //replaces the block of consecutive operators with the latest one\n          }\n\n          return _objectSpread({}, state, {\n            formula: formulaVal,\n            display: _keyVal\n          });\n        } else {\n          return _objectSpread({}, state, {\n            evaluated: false,\n            formula: \"\".concat(_display).concat(formulaKeyVal),\n            display: _keyVal\n          });\n        }\n      }\n\n    case ON_EQUAL_CLICK:\n      {\n        var _formula2 = state.formula,\n            _evaluated2 = state.evaluated;\n\n        if (_evaluated2) {\n          return state;\n        }\n\n        var expression = _formula2;\n\n        while (endsWithOperator.test(_formula2)) {\n          expression = expression.slice(0, -1);\n        }\n\n        expression = expression.replace(/x/g, '*').replace(/‑/g, '-');\n        var answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n        return _objectSpread({}, state, {\n          evaluated: true,\n          formula: expression.replace(/\\*/g, '⋅').replace(/-/g, '‑') + '=' + answer,\n          display: answer.toString()\n        });\n      }\n\n    case ON_ZERO_CLICK:\n      {\n        var _formula3 = state.formula,\n            _evaluated3 = state.evaluated,\n            _display2 = state.display,\n            _keyVal2 = action.payload.keyVal,\n            _endString = _display2.charAt(_display2.length - 1);\n\n        if (!_formula3.length) {\n          return state;\n        }\n\n        if (_evaluated3) {\n          return initialState;\n        }\n\n        return _objectSpread({}, state, {\n          formula: \"\".concat(_formula3).concat(_keyVal2 === multiply ? asterisk : _keyVal2),\n          display: _endString === '.' ? \"\".concat(_display2).concat(_keyVal2) : _keyVal2\n        });\n      }\n\n    case ON_DECIMAL_CLICK:\n      {\n        var _formula4 = state.formula,\n            _display3 = state.display,\n            _keyVal3 = action.payload.keyVal,\n            _endString2 = _display3.charAt(_display3.length - 1);\n\n        if (_display3.includes(decimal)) {\n          return state;\n        }\n\n        return _objectSpread({}, state, {\n          formula: \"\".concat(_formula4).concat(_keyVal3 === multiply ? asterisk : _keyVal3),\n          display: \"\".concat(_endString2).concat(_keyVal3)\n        });\n      }\n\n    case ON_CLEAR_CLICK:\n      {\n        return _objectSpread({}, initialState);\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\FAJAR.PK\\fcc\\src\\store\\calculator\\reducer.tsx"],"names":["subtract","ON_OPERATOR_CLICK","multiply","asterisk","operators","ON_NUM_CLICK","ON_EQUAL_CLICK","ON_CLEAR_CLICK","ON_ZERO_CLICK","ON_DECIMAL_CLICK","decimal","initialState","formula","display","evaluated","isOperator","endsWithOperator","endsWithNegativeSign","clearStyle","background","operatorStyle","equalsStyle","position","height","bottom","state","action","type","keyVal","payload","displayVal","charAt","substr","endString","length","formulaKeyVal","formulaVal","console","log","Object","values","includes","slice","operatorReg","tempOps","match","opBlock","toString","replace","expression","test","answer","Math","round","eval"],"mappings":"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","sourcesContent":["import math from 'mathjs';\nimport { subtract } from './types';\nimport {\n  CalcState,\n  CalcActionTypes,\n  ON_OPERATOR_CLICK,\n  multiply,\n  asterisk,\n  operator,\n  operators,\n  ON_NUM_CLICK,\n  ON_EQUAL_CLICK,\n  ON_CLEAR_CLICK,\n  ON_ZERO_CLICK,\n  ON_DECIMAL_CLICK,\n  decimal\n} from './types';\n\nexport const initialState: CalcState = {\n  formula: '',\n  display: '0',\n  evaluated: false\n};\nconst isOperator = /[x/+‑]/,\n  endsWithOperator = /[x+‑/]$/,\n  endsWithNegativeSign = /[x/+]‑$/,\n  clearStyle = { background: '#ac3939' },\n  operatorStyle = { background: '#666666' },\n  equalsStyle = {\n    background: '#004466',\n    position: 'absolute',\n    height: 130,\n    bottom: 5\n  };\n\nexport default (state = initialState, action: CalcActionTypes) => {\n  switch (action.type) {\n    case ON_NUM_CLICK: {\n      const { formula, evaluated, display } = state,\n        { keyVal } = action.payload,\n        displayVal = `${display}${keyVal}`;\n      if (!evaluated) {\n        return {\n          ...state,\n          formula: `${formula}${keyVal === multiply ? asterisk : keyVal}`,\n          display:\n            displayVal.charAt(0) === '0' ? displayVal.substr(1) : displayVal\n        };\n      }\n      if (evaluated) {\n        return { formula: keyVal, display: keyVal, evaluated: false };\n      }\n    }\n    case ON_OPERATOR_CLICK: {\n      const { formula, display, evaluated } = state,\n        { keyVal } = action.payload,\n        endString = display.charAt(display.length - 1),\n        formulaKeyVal = keyVal === multiply ? asterisk : keyVal;\n      let formulaVal = `${formula}${formulaKeyVal}`;\n      if (!evaluated) {\n        if (!formula.length) {\n          return state;\n        }\n        if (endString === keyVal) {\n          return state;\n        } // temp.match(/[+\\-*/]/g)\n        if (endString === multiply && keyVal === subtract) {\n          console.log('formulaVal ', formulaVal);\n          return {\n            ...state,\n            formula: formulaVal,\n            display: keyVal\n          };\n        }\n        if (\n          Object.values(operators).includes(endString) &&\n          endString !== keyVal\n        ) {\n          formulaVal = formulaVal.slice(0, -2) + formulaKeyVal;\n        }\n        const operatorReg = /(\\+|-|\\*|\\/){2,}/; //checks for consecutive operators in the string\n        let tempOps = formulaVal.match(operatorReg); //this contains the group or groups of consecutive operators\n        if (tempOps != null) {\n          let opBlock = tempOps[0].toString(); //converts the block into string\n          formulaVal = formulaVal.replace(opBlock, tempOps[tempOps.length - 1]); //replaces the block of consecutive operators with the latest one\n        }\n        return {\n          ...state,\n          formula: formulaVal,\n          display: keyVal\n        };\n      } else {\n        return {\n          ...state,\n          evaluated: false,\n          formula: `${display}${formulaKeyVal}`,\n          display: keyVal\n        };\n      }\n    }\n    case ON_EQUAL_CLICK: {\n      const { formula, evaluated } = state;\n      if (evaluated) {\n        return state;\n      }\n      let expression = formula;\n      while (endsWithOperator.test(formula)) {\n        expression = expression.slice(0, -1);\n      }\n      expression = expression.replace(/x/g, '*').replace(/‑/g, '-');\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n\n      return {\n        ...state,\n        evaluated: true,\n        formula:\n          expression.replace(/\\*/g, '⋅').replace(/-/g, '‑') + '=' + answer,\n        display: answer.toString()\n      };\n    }\n    case ON_ZERO_CLICK: {\n      const { formula, evaluated, display } = state,\n        { keyVal } = action.payload,\n        endString = display.charAt(display.length - 1);\n      if (!formula.length) {\n        return state;\n      }\n      if (evaluated) {\n        return initialState;\n      }\n      return {\n        ...state,\n        formula: `${formula}${keyVal === multiply ? asterisk : keyVal}`,\n        display: endString === '.' ? `${display}${keyVal}` : keyVal\n      };\n    }\n    case ON_DECIMAL_CLICK: {\n      const { formula, display } = state,\n        { keyVal } = action.payload,\n        endString = display.charAt(display.length - 1);\n      if (display.includes(decimal)) {\n        return state;\n      }\n      return {\n        ...state,\n        formula: `${formula}${keyVal === multiply ? asterisk : keyVal}`,\n        display: `${endString}${keyVal}`\n      };\n    }\n    case ON_CLEAR_CLICK: {\n      return { ...initialState };\n    }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}